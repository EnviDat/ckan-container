{{- if .Values.db.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "chart.fullname" . }}-db-sync
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      initContainers:
        - name: check-db-ready
          image: docker.io/postgis/postgis:14-3.2
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: {{ .Values.db.syncData.restoreDbSecret }}
            - secretRef:
                name: {{ .Values.db.syncData.backupDbSecret }}
          command:
            - /bin/bash
            - -c
            - |
              until pg_isready -h "$BACKUP_DB_HOST"; do
                  echo "waiting for replication database to be ready";
                  sleep 2;
              done;
              until pg_isready -h "$RESTORE_DB_HOST"; do
                echo "waiting for restore database to be ready";
                sleep 2;
              done;
      containers:
        - name: backup-db
          image: docker.io/postgis/postgis:14-3.2
          imagePullPolicy: IfNotPresent
          envFrom:
            - secretRef:
                name: {{ .Values.db.syncData.restoreDbSecret }}
            - secretRef:
                name: {{ .Values.db.syncData.backupDbSecret }}
          env:
            - name: DB_USER
              value: {{ .Values.db.syncData.dbUser }}
            - name: DB_CKAN_NAME
              value: {{ .Values.db.syncData.dbCkanName }}
            - name: DB_DOI_NAME
              value: {{ .Values.db.syncData.dbDoiName }}
          command:
            - /bin/bash
            - -c
            - |
              echo "Re-creating databases on $RESTORE_DB_HOST"
              PGPASSWORD="$RESTORE_DB_PG_PASS" psql -v ON_ERROR_STOP=1 \
                  --host "$RESTORE_DB_HOST" --username postgres --dbname postgres <<-EOSQL
                  DROP DATABASE IF EXISTS "$DB_CKAN_NAME" WITH (FORCE);
                  CREATE DATABASE "$DB_CKAN_NAME" WITH OWNER="$DB_USER";
                  DROP DATABASE IF EXISTS "$DB_DOI_NAME" WITH (FORCE);
                  CREATE DATABASE "$DB_DOI_NAME" WITH OWNER="$DB_USER";
              EOSQL
              echo "Backup and restoring $DB_CKAN_NAME via pipe to new host."
              PGPASSWORD="$BACKUP_DB_PASS" pg_dump --verbose --format c \
                  --host "$BACKUP_DB_HOST" --username "$DB_USER" "$DB_CKAN_NAME" \
                  | PGPASSWORD="$RESTORE_DB_PG_PASS" pg_restore --verbose \
                  --create --clean --exit-on-error \
                  --host "$RESTORE_DB_HOST" --username postgres --dbname postgres
              echo "Backup and restoring $DB_DOI_NAME via pipe to new host."
              PGPASSWORD="$BACKUP_DB_PASS" pg_dump --verbose --format c \
                  --host "$BACKUP_DB_HOST" --username "$DB_USER" "$DB_DOI_NAME" \
                  | PGPASSWORD="$RESTORE_DB_PG_PASS" pg_restore --verbose \
                  --create --clean --exit-on-error \
                  --host "$RESTORE_DB_HOST" --username postgres --dbname postgres
              echo "Adding Postgis extension if does not exist."
              PGPASSWORD="$RESTORE_DB_PG_PASS" psql -v ON_ERROR_STOP=1 \
                  --host "$RESTORE_DB_HOST" --username postgres --dbname postgres <<-EOSQL
                  CREATE EXTENSION IF NOT EXISTS postgis;
                  CREATE EXTENSION IF NOT EXISTS postgis_topology;
                  CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
                  CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;
                  ALTER VIEW geometry_columns OWNER TO "$DB_USER";
                  ALTER TABLE spatial_ref_sys OWNER TO "$DB_USER";
              EOSQL
      restartPolicy: OnFailure
      activeDeadlineSeconds: 300
{{- end }}
