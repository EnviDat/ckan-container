FROM reg.dev.localhost/ckan:2.9
ADD file:3c54ad257f2e04f7294ce879b884820cf4726c8e93ec548172825963e40c79ad in /
CMD ["bash"]
ENV PATH=/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
ENV LANG=C.UTF-8
RUN /bin/sh -c set -eux;        apt-get update;         apt-get install -y --no-install-recommends              ca-certificates                netbase         ;       rm -rf /var/lib/apt/lists/*
ENV GPG_KEY=E3FF2839C048B25C084DEBE9B26995E310250568
ENV PYTHON_VERSION=3.8.12
RUN /bin/sh -c set -ex          \
    && savedAptMark="$(apt-mark showmanual)"    \
    && apt-get update \
    && apt-get install -y --no-install-recommends               dpkg-dev                gcc             libbluetooth-dev      libbz2-dev               libc6-dev               libexpat1-dev           libffi-dev              libgdbm-dev             liblzma-dev            libncursesw5-dev                libreadline-dev                 libsqlite3-dev          libssl-dev            make             tk-dev          uuid-dev                wget            xz-utils                zlib1g-dev              $(command -v gpg > /dev/null || echo 'gnupg dirmngr')          \
    && wget -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz"      \
    && wget -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc"       \
    && export GNUPGHOME="$(mktemp -d)"  \
    && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$GPG_KEY"   \
    && gpg --batch --verify python.tar.xz.asc python.tar.xz     \
    && { command -v gpgconf > /dev/null \
    && gpgconf --kill all || :; }       \
    && rm -rf "$GNUPGHOME" python.tar.xz.asc    \
    && mkdir -p /usr/src/python         \
    && tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz   \
    && rm python.tar.xz                 \
    && cd /usr/src/python       \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)"        \
    && ./configure              --build="$gnuArch"              --enable-loadable-sqlite-extensions             --enable-optimizations                 --enable-option-checking=fatal          --enable-shared                 --with-system-expat           --with-system-ffi                --without-ensurepip     \
    && make -j "$(nproc)"               LDFLAGS="-Wl,--strip-all"       \
    && make install     \
    && rm -rf /usr/src/python           \
    && find /usr/local -depth           \(                      \( -type d -a \( -name test -o -name tests -o -name idle_test \) \)                    -o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name '*.a' \) \)                         -o \( -type f -a -name 'wininst-*.exe' \)              \) -exec rm -rf '{}' +          \
    && ldconfig                 \
    && apt-mark auto '.*' > /dev/null   \
    && apt-mark manual $savedAptMark    \
    && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';'              | awk '/=>/ { print $(NF-1) }'                 | sort -u               | xargs -r dpkg-query --search          | cut -d: -f1           | sort -u     | xargs -r apt-mark manual       \
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false     \
    && rm -rf /var/lib/apt/lists/*              \
    && python3 --version
RUN /bin/sh -c cd /usr/local/bin        \
    && ln -s idle3 idle         \
    && ln -s pydoc3 pydoc       \
    && ln -s python3 python     \
    && ln -s python3-config python-config
ENV PYTHON_PIP_VERSION=21.2.4
ENV PYTHON_SETUPTOOLS_VERSION=57.5.0
ENV PYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/3cb8888cc2869620f57d5d2da64da38f516078c7/public/get-pip.py
ENV PYTHON_GET_PIP_SHA256=c518250e91a70d7b20cceb15272209a4ded2a0c263ae5776f129e0d9b5674309
RUN /bin/sh -c set -ex;                 savedAptMark="$(apt-mark showmanual)";  apt-get update;         apt-get install -y --no-install-recommends wget;               wget -O get-pip.py "$PYTHON_GET_PIP_URL";       echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum --check --strict -;              apt-mark auto '.*' > /dev/null;         [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;       apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   rm -rf /var/lib/apt/lists/*;           python get-pip.py               --disable-pip-version-check             --no-cache-dir          "pip==$PYTHON_PIP_VERSION"             "setuptools==$PYTHON_SETUPTOOLS_VERSION"        ;       pip --version;          find /usr/local -depth\(                       \( -type d -a \( -name test -o -name tests -o -name idle_test \) \)                     -o            \( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \)            \) -exec rm -rf '{}' +;         rm -f get-pip.py
CMD ["python3"]


base stage? from Python?
FROM ....
RUN SHELL [/bin/bash -c]
RUN ENV TZ=UTC
RUN RUN /bin/bash -c ln -snf /usr/share/zoneinfo/$TZ /etc/localtime \
    && echo $TZ > /etc/timezone # buildkit
RUN ENV LC_ALL=en_US.UTF-8
RUN RUN /bin/bash -c apt-get update # buildkit
RUN RUN /bin/bash -c apt-get install --no-install-recommends -y locales # buildkit
RUN RUN /bin/bash -c sed -i "/$LC_ALL/s/^# //g" /etc/locale.gen # buildkit
RUN RUN /bin/bash -c dpkg-reconfigure --frontend=noninteractive locales # buildkit
RUN RUN /bin/bash -c update-locale LANG=${LC_ALL} # buildkit
RUN RUN /bin/bash -c apt-get -q -y update     \
    && DEBIAN_FRONTEND=noninteractive apt-get -q -y upgrade     \
    && apt-get -q -y install --no-install-recommends         python3-dev         python3-pip         python3-venv         python3-wheel         libpq-dev         libxml2-dev         libxslt-dev         libgeos-dev         libssl-dev         libffi-dev         libmagic-dev         postgresql-client         build-essential         git-core         nano         wget         curl     \
    && apt-get -q clean     \
    && rm -rf /var/lib/apt/lists/* # buildkit
RUN ENV CKAN_HOME=/usr/lib/ckan
RUN ENV CKAN_VENV=/usr/lib/ckan/venv
RUN ENV CKAN_CONFIG=/etc/ckan
RUN ENV CKAN_STORAGE_PATH=/var/lib/ckan
RUN RUN /bin/bash -c useradd -r -u 900 -m -c "ckan account" -d $CKAN_HOME -s /bin/false ckan # buildkit

3rd stage - missing build
RUN COPY /usr/lib/ckan/venv /usr/lib/ckan/venv # buildkit
RUN RUN /bin/bash -c mkdir -p $CKAN_VENV $CKAN_CONFIG $CKAN_STORAGE_PATH \
    &&     ln -s $CKAN_VENV/bin/ckan /usr/local/bin/ckan # buildkit
RUN ENV PATH=/usr/lib/ckan/venv/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RUN COPY ./who.ini /etc/ckan/ # buildkit
RUN COPY ./ckan-entrypoint.sh /ckan-entrypoint.sh # buildkit
RUN RUN /bin/bash -c chmod +x /ckan-entrypoint.sh \
    &&     chown -R ckan:ckan $CKAN_HOME $CKAN_VENV $CKAN_CONFIG $CKAN_STORAGE_PATH # buildkit
RUN ENTRYPOINT ["/ckan-entrypoint.sh"]
RUN USER ckan
RUN EXPOSE map[5000/tcp:{}]
RUN CMD ["ckan" "-c" "/etc/ckan/production.ini" "run" "--host" "0.0.0.0"]