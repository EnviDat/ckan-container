stages:
  - build
  - scan
  - package

variables:
  ARTIFACT_COMPRESSION_LEVEL: "fast"
  CACHE_COMPRESSION_LEVEL: "fast"

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always

set-vars:
  stage: .pre
  image: docker.io/alpine:3.15
  script:
    - cat .env >> build.env
    - source build.env
    - "echo CKAN_IMAGE=${INTERNAL_REG}/ckan:\
      ${CKAN_VERSION}-${CI_COMMIT_REF_NAME} >> build.env"
    - "echo DB_IMAGE=${INTERNAL_REG}/ckan-db:\
      ${POSTGRES_VERSION}-${POSTGIS_VERSION}-${CI_COMMIT_REF_NAME} >> build.env"
    - "echo SOLR_IMAGE=${INTERNAL_REG}/ckan-solr:\
      ${SOLR_VERSION}-${CI_COMMIT_REF_NAME} >> build.env"
    - "echo SOLR_INIT_IMAGE=${INTERNAL_REG}/ckan-init-solr:\
      ${SOLR_VERSION}-${CI_COMMIT_REF_NAME} >> build.env"
  artifacts:
    reports:
      dotenv: build.env

.build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /kaniko/ssl/certs/ca-certificates.crt
    - mkdir -p /kaniko/.docker
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf
      "%s:%s" "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}"
      | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - >
      /kaniko/executor
      --context "${CONTEXT_DIR}"
      --dockerfile "${CONTEXT_DIR}/Dockerfile"
      --cache=true
      --destination "${IMAGE_NAME}-unverified"
      --build-arg MAINTAINER="${MAINTAINER}"
      --build-arg EXTERNAL_REG="${EXTERNAL_REG}"
      --build-arg PYTHON_VERSION="${PYTHON_VERSION}"
      --build-arg CKAN_VERSION="${CKAN_VERSION}"
      --build-arg POSTGRES_VERSION="${POSTGRES_VERSION}"
      --build-arg POSTGIS_VERSION="${POSTGIS_VERSION}"
      --build-arg SOLR_VERSION="${SOLR_VERSION}"

ckan-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${CKAN_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}"

db-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${DB_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}/postgresql"

solr-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${SOLR_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}/solr"

solr-init-build:
  extends:
    - .build
  variables:
    IMAGE_NAME: ${SOLR_INIT_IMAGE}
    CONTEXT_DIR: "${CI_PROJECT_DIR}/init_solr"

.scan:
  stage: scan
  image:
    name: docker.io/aquasec/trivy:0.23.0
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
  before_script:
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-certificates.crt
  script:
    - trivy --version
    - time trivy image --clear-cache
    - time trivy --cache-dir .trivycache/ image --download-db-only --no-progress
    # Create report artifact
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress --format template --template "@/contrib/gitlab.tpl"
      --output "$CI_PROJECT_DIR/$SHORT_NAME-imgscan.json"
      "${IMAGE_NAME}-unverified"
    # Print full report
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 0 --ignore-unfixed
      --no-progress "${IMAGE_NAME}"-unverified
    # Fail on critical vulnerabilities
    - >
      time trivy --cache-dir .trivycache/ image --exit-code 1 --ignore-unfixed
      --severity CRITICAL --no-progress "${IMAGE_NAME}"-unverified
  cache:
    key: trivy-cache
    paths:
      - .trivycache/
    policy: pull-push
  artifacts:
    when: always
    reports:
      container_scanning: $SHORT_NAME-imgscan.json

ckan-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${CKAN_IMAGE}
    SHORT_NAME: "ckan"

db-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${DB_IMAGE}
    SHORT_NAME: "postgresql"

solr-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${SOLR_IMAGE}
    SHORT_NAME: "solr"
  allow_failure: true

solr-init-scan:
  extends:
    - .scan
  variables:
    IMAGE_NAME: ${SOLR_INIT_IMAGE}
    SHORT_NAME: "init_solr"

.retag:
  stage: package
  image: docker.io/regclient/regctl:v0.3-alpine
  variables:
    GIT_STRATEGY: none
  before_script:
    - export REG_HOST=${INTERNAL_REG%/*}
    - >
      echo "{\"hosts\":{\"${REG_HOST}\":{\"tls\":\"enabled\",\"regcert\":
      \"$(printf "%s" "${IMAGE_REGISTRY_CERT}" | base64 -d
      | awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}')\",\"hostname\":
      \"${REG_HOST}\",\"user\":\"${IMAGE_REGISTRY_USER}\",\"pass\":
      \"${IMAGE_REGISTRY_PASS}\"}}}" >> /home/appuser/.regctl/config.json
  script:
    - >
      regctl --verbosity debug image copy
      "${IMAGE_NAME}-unverified" "${IMAGE_NAME}"
    - regctl --verbosity debug tag delete "${IMAGE_NAME}-unverified"

ckan-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${CKAN_IMAGE}

db-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${DB_IMAGE}

solr-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${SOLR_IMAGE}

solr-init-retag:
  extends:
    - .retag
  variables:
    IMAGE_NAME: ${SOLR_INIT_IMAGE}

create-helm-chart:
  stage: package
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
      when: always
  image:
    name: docker.io/alpine/helm:3.8.0
    entrypoint: [""]
  before_script:
    - > 
      apk add yq --no-cache 
      --repository=http://dl-cdn.alpinelinux.org/alpine/edge/community
    - >
      echo "${IMAGE_REGISTRY_CA_CERT}"
      | base64 -d >> /etc/ssl/certs/ca-certificates.crt
    - mkdir -p /root/.config/helm/registry
    - >
      echo "{\"auths\":{\"${INTERNAL_REG}\":{\"auth\":\"$(printf "%s:%s"
      "${IMAGE_REGISTRY_USER}" "${IMAGE_REGISTRY_PASS}" | base64
      | tr -d '\n')\"}}}" > /root/.config/helm/registry/config.json
    - export HELM_APP_VERSION="${CKAN_VERSION}-${CI_COMMIT_REF_NAME}"
  script:
    - helm dependencies build chart
    - yq -i '.appVersion = strenv(HELM_APP_VERSION)' chart/Chart.yaml
    - helm package chart
    - CHART_VER=$(yq '.version' chart/Chart.yaml)
    - helm push "ckan-${CHART_VER}.tgz" oci://registry.envidat.ch/envidat
